import java.util.InputMismatchException;
import java.util.Scanner;

//  Bank account class
class BankAccount {
    private double balance;

    public BankAccount(double openingBalance) {
        if (openingBalance < 0) {
            throw new IllegalArgumentException("Opening balance cannot be negative.");
        }
        this.balance = openingBalance;
    }

    public double getBalance() {
        return balance;
    }

    public boolean deposit(double amount) {
        if (amount <= 0) return false;
        balance += amount;
        return true;
    }

    public boolean withdraw(double amount) {
        if (amount <= 0) return false;
        if (amount > balance) return false;
        balance -= amount;
        return true;
    }
}

//  ATM class with UI options
class ATM {
    private final BankAccount account;
    private final Scanner scanner;

    public ATM(BankAccount account, Scanner scanner) {
        this.account = account;
        this.scanner = scanner;
    }

    //  Implement actions
    public void withdraw() {
        double amount = promptAmount("Enter amount to withdraw: ");
        if (amount <= 0) {
            System.out.println(" Invalid amount. Must be greater than 0.");
            return;
        }
        if (account.withdraw(amount)) {
            System.out.printf("Withdrawal successful. New balance: ₹%.2f%n", account.getBalance());
        } else {
            if (amount > account.getBalance()) {
                System.out.println(" Insufficient balance.");
            } else {
                System.out.println(" Withdrawal failed.");
            }
        }
    }

    public void deposit() {
        double amount = promptAmount("Enter amount to deposit: ");
        if (amount <= 0) {
            System.out.println(" Invalid amount. Must be greater than 0.");
            return;
        }
        if (account.deposit(amount)) {
            System.out.printf(" Deposit successful. New balance: ₹%.2f%n", account.getBalance());
        } else {
            System.out.println(" Deposit failed.");
        }
    }

    public void checkBalance() {
        System.out.printf(" Current balance: ₹%.2f%n", account.getBalance());
    }

    // Simple text UI
    public void start() {
        int choice;
        do {
            printMenu();
            choice = readInt("Choose an option: ");
            switch (choice) {
                case 1: withdraw(); break;
                case 2: deposit(); break;
                case 3: checkBalance(); break;
                case 0: System.out.println(" Thank you for using the ATM."); break;
                default: System.out.println(" Invalid option. Try again.");
            }
            System.out.println(); // spacing
        } while (choice != 0);
    }

    private void printMenu() {
        System.out.println("======== ATM MENU ========");
        System.out.println("1. Withdraw");
        System.out.println("2. Deposit");
        System.out.println("3. Check Balance");
        System.out.println("0. Exit");
        System.out.println("==========================");
    }

    //  Validate user input
    private int readInt(String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println(" Please enter a valid integer.");
            }
        }
    }

    private double promptAmount(String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                double val = Double.parseDouble(scanner.nextLine().trim());
                return val;
            } catch (NumberFormatException e) {
                System.out.println(" Please enter a valid number.");
            }
        }
    }
}

//  Wiring ATM with BankAccount
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // For demo: create an account with an opening balance
        double openingBalance = 0.0;
        while (true) {
            System.out.print("Enter opening balance: ");
            try {
                openingBalance = Double.parseDouble(sc.nextLine().trim());
                if (openingBalance < 0) {
                    System.out.println(" Opening balance cannot be negative.");
                    continue;
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println(" Please enter a valid number.");
            }
        }

        BankAccount account = new BankAccount(openingBalance);
        ATM atm = new ATM(account, sc);
        atm.start();

        sc.close();
    }
}
